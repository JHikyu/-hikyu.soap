const http=require("http"),fs=require("fs"),mime=require("mime"),events=require("events"),eventEmitter=new events.EventEmitter;var routes={};function init(n){return new Promise((e,t)=>{try{http.createServer(async function(e,n){var t;n.send=function(e){n.writeHead(200,{"Content-Type":"text/plain"}),n.end(e)},n.render=function(e,t){fs.existsSync("./views/"+e)?fs.readFile("./views/"+e,function(e,t){e&&(n.writeHead(200,{"Content-Type":"text/plain"}),n.end("an erorr occured")),n.writeHead(200,{"Content-Type":"text/html"}),n.write(t),n.end()}):(n.writeHead(404,{"Content-Type":"text/plain"}),n.end("not found"))},routes[e.url]&&routes[e.url].method===e.method?(console.log(routes[e.url]),routes[e.url].callback(e,n)):fs.existsSync("./public"+e.url)?(t=await readFileData(e.url),n.writeHead(200,{"Content-Type":mime.getType("./public"+e.url)}),n.end(t)):(n.writeHead(404,{"Content-Type":"text/plain"}),n.end("not found"))}).listen(n),eventEmitter.emit("started",{port:n}),e(n)}catch(e){t(e)}})}function on(e,t){eventEmitter.on(e,t)}function once(e,t){eventEmitter.once(e,t)}function get(e,t){routes[e]={method:"GET",callback:t}}async function readFileData(e){return new Promise((n,t)=>{try{fs.readFile("./public"+e,(e,t)=>{n(t)})}catch(e){t(e)}})}module.exports={init:init,on:on,once:once,get:get};